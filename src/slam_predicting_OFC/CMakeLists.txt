set(CMAKE_BUILD_TYPE Release)

# Set required variables.
SET(SLAM_EXAMPLE_BINARY_NAME "slam_predicting_ofc")

SET(SLAM_EXAMPLE_INCLUDE_DIRS
        ${SLAM_P_P_SOURCE_DIR}/include/slam_predicting_OFC
        ${SLAM_P_P_SOURCE_DIR}/utilite/include)

IF(SLAM_P_P_SHORT_CXSPARSE)
    ADD_DEFINITIONS(-D__CXSPARSE_SHORT)
ENDIF(SLAM_P_P_SHORT_CXSPARSE)

IF(SLAM_P_P_SHORT_CHOLMOD)
    ADD_DEFINITIONS(-D__CHOLMOD_SHORT)
ENDIF(SLAM_P_P_SHORT_CHOLMOD)

IF(SLAM_P_P_FLAT_SYSTEM_ALIGNED_MEMORY)
    ADD_DEFINITIONS(-D__FLAT_SYSTEM_ALIGNED_MEMORY)
ENDIF(SLAM_P_P_FLAT_SYSTEM_ALIGNED_MEMORY)

# support for GPU BLAS
IF(SLAM_P_P_GPU_BLAS)
    ADD_DEFINITIONS(
            -DGPU_BLAS
            -D__CHANNEL_DESCRIPTOR_H__
            -D__CUDA_RUNTIME_H__)
ENDIF(SLAM_P_P_GPU_BLAS)

ADD_DEFINITIONS(-DCERES_NO_PROTOCOL_BUFFERS)

SET(SLAM_EXAMPLE_SOURCES
        Main.cpp)

IF(SLAM_P_P_LINEAR_SOLVER_TYPE)
    ADD_DEFINITIONS("-D__LINEAR_SOLVER_OVERRIDE=${SLAM_P_P_LINEAR_SOLVER_TYPE}")
ENDIF(SLAM_P_P_LINEAR_SOLVER_TYPE)

# Build and install SLAM_plus_plus executable.
INCLUDE_DIRECTORIES(${SLAM_EXAMPLE_INCLUDE_DIRS})

ADD_EXECUTABLE(${SLAM_EXAMPLE_BINARY_NAME}
        ${SLAM_EXAMPLE_SOURCES})

TARGET_LINK_LIBRARIES(${SLAM_EXAMPLE_BINARY_NAME}
        ${SLAM_EXAMPLE_LIBRARIES})

INSTALL(TARGETS ${SLAM_EXAMPLE_BINARY_NAME}
        RUNTIME DESTINATION bin)

# debug - see the properties that SLAM++ is compiled with
get_directory_property( DirDefs COMPILE_DEFINITIONS )
message(STATUS "COMPILE_DEFINITIONS = ${DirDefs}" )
IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
	message(STATUS "CMAKE_CXX_FLAGS_DEBUG = ${CMAKE_CXX_FLAGS_DEBUG}" )
	message(STATUS "CMAKE_C_FLAGS_DEBUG = ${CMAKE_C_FLAGS_DEBUG}" )
ELSE(CMAKE_BUILD_TYPE STREQUAL "Debug")
	message(STATUS "CMAKE_CXX_FLAGS_RELEASE = ${CMAKE_CXX_FLAGS_RELEASE}" )
	message(STATUS "CMAKE_C_FLAGS_RELEASE = ${CMAKE_C_FLAGS_RELEASE}" )
ENDIF(CMAKE_BUILD_TYPE STREQUAL "Debug")
message(STATUS "CMAKE_EXE_LINKER_FLAGS = ${CMAKE_EXE_LINKER_FLAGS}" )
MESSAGE(STATUS "OpenMP_C_FLAGS = ${OpenMP_C_FLAGS}")
