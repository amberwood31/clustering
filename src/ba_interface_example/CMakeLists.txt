
# Set required variables.
SET(SLAM_EXAMPLE_BINARY_NAME "ba_iface_example")
SET(SLAM_EXAMPLE_STATICLIB_NAME "${SLAM_EXAMPLE_BINARY_NAME}_stat_lib")
SET(SLAM_EXAMPLE_SHAREDLIB_NAME "${SLAM_EXAMPLE_BINARY_NAME}_dyn_lib")

SET(STATICLIB_NAME "ba_iface_static")
SET(SHAREDLIB_NAME "ba_iface_shared")

FILE(GLOB_RECURSE SLAM_EXAMPLE_HEADERS ${SLAM_P_P_SOURCE_DIR}/include/ba_interface_example/*.h ${SLAM_P_P_SOURCE_DIR}/include/slam/*.h)

IF(SLAM_P_P_SHORT_CXSPARSE)
	ADD_DEFINITIONS(-D__CXSPARSE_SHORT)
ENDIF(SLAM_P_P_SHORT_CXSPARSE)

IF(SLAM_P_P_SHORT_CHOLMOD)
	ADD_DEFINITIONS(-D__CHOLMOD_SHORT)
ENDIF(SLAM_P_P_SHORT_CHOLMOD)

IF(SLAM_P_P_FLAT_SYSTEM_ALIGNED_MEMORY)
	ADD_DEFINITIONS(-D__FLAT_SYSTEM_ALIGNED_MEMORY)
ENDIF(SLAM_P_P_FLAT_SYSTEM_ALIGNED_MEMORY)

# support for GPU BLAS
IF(SLAM_P_P_GPU_BLAS)
	ADD_DEFINITIONS(
		-DGPU_BLAS
		-D__CHANNEL_DESCRIPTOR_H__
		-D__CUDA_RUNTIME_H__)
ENDIF(SLAM_P_P_GPU_BLAS)

ADD_DEFINITIONS(-DCERES_NO_PROTOCOL_BUFFERS)

SET(SLAM_EXAMPLE_SOURCES
  Main.cpp
  BAOptimizer.cpp)

IF(SLAM_P_P_LINEAR_SOLVER_TYPE)
	ADD_DEFINITIONS("-D__LINEAR_SOLVER_OVERRIDE=${SLAM_P_P_LINEAR_SOLVER_TYPE}")
ENDIF(SLAM_P_P_LINEAR_SOLVER_TYPE)

# Build and install SLAM_plus_plus executable.
#ADD_EXECUTABLE(${SLAM_EXAMPLE_BINARY_NAME}
#	${SLAM_EXAMPLE_SOURCES}
#	${SLAM_EXAMPLE_HEADERS})

#TARGET_LINK_LIBRARIES(${SLAM_EXAMPLE_BINARY_NAME}
#	${SLAM_EXAMPLE_LIBRARIES})

#INSTALL(TARGETS ${SLAM_EXAMPLE_BINARY_NAME}
#	RUNTIME DESTINATION bin)

# Build static library
ADD_LIBRARY(${STATICLIB_NAME} SHARED BAOptimizer.cpp)
ADD_EXECUTABLE(${SLAM_EXAMPLE_STATICLIB_NAME} Main.cpp ${SLAM_EXAMPLE_HEADERS})
TARGET_LINK_LIBRARIES(${STATICLIB_NAME} ${SLAM_EXAMPLE_LIBRARIES})
TARGET_LINK_LIBRARIES(${SLAM_EXAMPLE_STATICLIB_NAME} ${STATICLIB_NAME})
INSTALL(TARGETS ${SLAM_EXAMPLE_STATICLIB_NAME}
		RUNTIME DESTINATION bin)

# Build shared library
#ADD_LIBRARY(${SHAREDLIB_NAME} SHARED BAOptimizer.cpp)
#ADD_EXECUTABLE(${SLAM_EXAMPLE_SHAREDLIB_NAME} Main.cpp ${SLAM_EXAMPLE_HEADERS})
#TARGET_LINK_LIBRARIES(${SHAREDLIB_NAME} ${SLAM_EXAMPLE_LIBRARIES})
#TARGET_LINK_LIBRARIES(${SLAM_EXAMPLE_SHAREDLIB_NAME} ${SHAREDLIB_NAME})
#INSTALL(TARGETS ${SLAM_EXAMPLE_SHAREDLIB_NAME}
#		RUNTIME DESTINATION bin)

# installing libraries:
INSTALL(TARGETS ${STATICLIB_NAME}
		LIBRARY DESTINATION lib/slam_pp
		ARCHIVE DESTINATION lib/slam_pp)
