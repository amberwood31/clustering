
# Set required variables.
SET(SLAM_BASE_LIBRARY_NAME "slampp_base")

FILE(GLOB_RECURSE SLAM_BASE_LIBRARY_HEADERS ${SLAM_P_P_SOURCE_DIR}/include/slam/*.h)

IF(SLAM_P_P_SHORT_CXSPARSE)
	ADD_DEFINITIONS(-D__CXSPARSE_SHORT)
ENDIF(SLAM_P_P_SHORT_CXSPARSE)

IF(SLAM_P_P_SHORT_CHOLMOD)
	ADD_DEFINITIONS(-D__CHOLMOD_SHORT)
ENDIF(SLAM_P_P_SHORT_CHOLMOD)

# support for GPU BLAS
IF(SLAM_P_P_GPU_BLAS)
	ADD_DEFINITIONS(
		-DGPU_BLAS
		-D__CHANNEL_DESCRIPTOR_H__
		-D__CUDA_RUNTIME_H__)
ENDIF(SLAM_P_P_GPU_BLAS)

SET(SLAM_BASE_LIBRARY_SOURCES
  LinearSolver_Schur_GPU.cpp
  BlockMatrix.cpp
  BlockMatrixTests.cpp
  Debug.cpp
  Eigenvalues.cpp
  LinearSolver_CholMod.cpp
  LinearSolver_CSparse.cpp
  LinearSolver_CXSparse.cpp
  LinearSolver_Schur.cpp
  OrderingMagic.cpp
  Parser.cpp
  Tags.cpp
  Tga.cpp
  Timer.cpp)

# Build and install SLAM_base library.
ADD_LIBRARY(${SLAM_BASE_LIBRARY_NAME} STATIC
	${SLAM_BASE_LIBRARY_SOURCES}
	${SLAM_BASE_LIBRARY_HEADERS})
INSTALL(TARGETS ${SLAM_BASE_LIBRARY_NAME}
	RUNTIME DESTINATION bin
	LIBRARY DESTINATION lib
	ARCHIVE DESTINATION lib)

# debug - see the properties that SLAM++ is compiled with
get_directory_property( DirDefs COMPILE_DEFINITIONS )
message(STATUS "COMPILE_DEFINITIONS = ${DirDefs}" )
IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
	message(STATUS "CMAKE_CXX_FLAGS_DEBUG = ${CMAKE_CXX_FLAGS_DEBUG}" )
	message(STATUS "CMAKE_C_FLAGS_DEBUG = ${CMAKE_C_FLAGS_DEBUG}" )
ELSE(CMAKE_BUILD_TYPE STREQUAL "Debug")
	message(STATUS "CMAKE_CXX_FLAGS_RELEASE = ${CMAKE_CXX_FLAGS_RELEASE}" )
	message(STATUS "CMAKE_C_FLAGS_RELEASE = ${CMAKE_C_FLAGS_RELEASE}" )
ENDIF(CMAKE_BUILD_TYPE STREQUAL "Debug")
message(STATUS "CMAKE_EXE_LINKER_FLAGS = ${CMAKE_EXE_LINKER_FLAGS}" )
MESSAGE(STATUS "OpenMP_C_FLAGS = ${OpenMP_C_FLAGS}")
